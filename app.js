// app.js (complete) window.addEventListener('DOMContentLoaded', async () => { // IndexedDB if (!window.idbKeyval) return console.error('idb-keyval not found'); const { get, set } = window.idbKeyval; const save = (k, v) => set(k, v);

// State let students = (await get('students')) || []; let attendanceData = (await get('attendanceData')) || {}; let finesData = (await get('finesData')) || {}; let paymentsData = (await get('paymentsData')) || {}; let lastAdmNo = (await get('lastAdmissionNo')) || 0; let fineRates = (await get('fineRates')) || { A:50, Lt:20, L:10, HD:30 }; let eligibilityPct = (await get('eligibilityPct')) || 75;

const genAdmNo = async () => { lastAdmNo++; await save('lastAdmissionNo', lastAdmNo); return String(lastAdmNo).padStart(4, '0'); };

// DOM Helpers const $ = id => document.getElementById(id); const show = (...els) => els.forEach(e => e && e.classList.remove('hidden')); const hide = (...els) => els.forEach(e => e && e.classList.add('hidden'));

// SEARCH & FILTER let searchTerm = ''; let filterOptions = { time: null, info: [], all: false }; const globalSearch = $('globalSearch'); const filterBtn = $('filterBtn'); const filterDialog = $('filterDialog'); const closeFilter = $('closeFilter'); const applyFilter = $('applyFilter'); const timeChecks = Array.from(filterDialog.querySelectorAll('input[name="timeFilter"]')); const pickers = { 'date-day': $('picker-date'), 'month': $('picker-month'), 'semester': $('picker-semester'), 'year': $('picker-year') };

// Toggle pickers timeChecks.forEach(chk => chk.onchange = () => { timeChecks.forEach(c => { if (c !== chk) c.checked = false; }); for (let [val, el] of Object.entries(pickers)) el.classList.toggle('hidden', chk.value !== val || !chk.checked); $('timePickers').classList.toggle('hidden', !chk.checked); });

globalSearch.oninput = () => { searchTerm = globalSearch.value.trim().toLowerCase(); renderStudents(); }; filterBtn.onclick = () => show(filterDialog); closeFilter.onclick = () => hide(filterDialog); applyFilter.onclick = () => { const t = timeChecks.find(c => c.checked)?.value; let range = null; if (t === 'date-day') { const d = $('filterDate').value; range = { from: d, to: d }; } else if (t === 'month') { const m = $('filterMonth').value; const [y, mm] = m.split('-').map(Number); range = { from: ${m}-01, to: ${m}-${new Date(y, mm, 0).getDate()} }; } else if (t === 'semester') { const s1 = $('filterSemStart').value, s2 = $('filterSemEnd').value; const [sy, sm] = s1.split('-').map(Number), [ey, em] = s2.split('-').map(Number); range = { from: ${s1}-01, to: ${s2}-${new Date(ey, em, 0).getDate()} }; } else if (t === 'year') { const y = $('filterYear').value; range = { from: ${y}-01-01, to: ${y}-12-31 }; } const info = Array.from(filterDialog.querySelectorAll('input[name="infoFilter"]:checked')).map(i => i.value); filterOptions = { time: range, info, all: info.includes('all') }; hide(filterDialog); renderStudents(); };

// SETTINGS const formDiv = $('financialForm'), saveSettings = $('saveSettings'); const inps = ['fineAbsent','fineLate','fineLeave','fineHalfDay','eligibilityPct'].map($); const settingsCard = document.createElement('div'); settingsCard.id = 'settingsCard'; settingsCard.className = 'card hidden'; const editSettings = document.createElement('button'); editSettings.id = 'editSettings'; editSettings.className = 'btn no-print hidden'; editSettings.textContent = 'Edit Settings'; formDiv.parentNode.append(settingsCard, editSettings);

['fineAbsent','fineLate','fineLeave','fineHalfDay'].forEach(id => $(id).value = fineRates[id.replace('fine','A').charAt(0)]); $('eligibilityPct').value = eligibilityPct; saveSettings.onclick = async () => { fineRates = { A:+$('fineAbsent').value||0, Lt:+$('fineLate').value||0, L:+$('fineLeave').value||0, HD:+$('fineHalfDay').value||0 }; eligibilityPct = +$('eligibilityPct').value||0; await Promise.all([ save('fineRates', fineRates), save('eligibilityPct', eligibilityPct) ]); settingsCard.innerHTML = <p>Fine–Absent PKR ${fineRates.A}</p><p>Fine–Late PKR ${fineRates.Lt}</p><p>Fine–Leave PKR ${fineRates.L}</p><p>Fine–Half-Day PKR ${fineRates.HD}</p><p>Elig% ≥ ${eligibilityPct}</p>; hide(formDiv, ...inps, saveSettings); show(settingsCard, editSettings); }; editSettings.onclick = () => { hide(settingsCard, editSettings); show(formDiv, ...inps, saveSettings); };

// SETUP async function loadSetup() { const [sc, cl, sec] = await Promise.all([ get('schoolName'), get('teacherClass'), get('teacherSection') ]); if (sc && cl && sec) { $('schoolNameInput').value=sc; $('teacherClassSelect').value=cl; $('teacherSectionSelect').value=sec; $('setupText').textContent = ${sc} | Class ${cl} Sec ${sec}; hide($('setupForm')); show($('setupDisplay')); renderStudents(); updateCounters(); resetViews(); } } $('saveSetup').onclick = async e => { e.preventDefault(); const sc=$('schoolNameInput').value.trim(), cl=$('teacherClassSelect').value, sec=$('teacherSectionSelect').value; if (!sc||!cl||!sec) return alert('Complete setup'); await Promise.all([ save('schoolName', sc), save('teacherClass', cl), save('teacherSection', sec) ]); await loadSetup(); }; $('editSetup').onclick = e => { e.preventDefault(); show($('setupForm')); hide($('setupDisplay')); }; await loadSetup();

// CONTINUE with part 2 and 3... (ensuring no unmatched braces) });

